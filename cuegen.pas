{******************************************************************************}
{                      Cue Sheet Generator                                     }
{                                                                              }
{       Copyright (C) 2013, 2014 Cue Sheet Generator Developement Team.        }
{                                                                              }
{   This file is part of Cue Sheet Generator.                                  }
{                                                                              }
{    Cue Sheet Generator is free software: you can redistribute it
    and/or modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.                                     }
{                                                                              }
{    Cue Sheet Generator is distributed in the hope that it will be
    useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.                       }
{                                                                              }
{   You should have received a copy of the GNU General Public License
   along with Cue Sheet Generator.
    If not, see <http://www.gnu.org/licenses/>.                                }
{******************************************************************************}

unit CueGen;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils;

const
  CompressedFileToken = 'MP3';
  NormalFileToken = 'AUDIO';

type

  TAudioModes = (amCompressed, amRedBook);
  TTrackModes = (tmMode12352, tmMode12048, tmMode22336, tmMode22352);

  TCueGen = class
  private
    procedure SetAudioMode(const am: TAudioModes);
    procedure SetFirstTrack(const n: integer);
    procedure SetLastTrack(const n: integer);
  protected
    FStartTrack: integer;
    FEndTrack: integer;
    FCueStrings: TStringList;
    FFileName: string;
    FExtension: string;
    FAudioToken: string;
    FUseDataTrack: boolean;
    FDataTrackName: string;
    FAudioMode: TAudioModes;
    FTrackMode: TTrackModes;
  public
    constructor Create;
    procedure Free;
    procedure GenerateCueFile;
    property StartTrack: integer read FStartTrack write SetFirstTrack;
    property EndTrack: integer read FEndTrack write SetLastTrack;
    property CueStrings: TStringList read FCueStrings;
    property FileName: string read FFileName write FFileName;
    property Extension: string read FExtension write FExtension;
    property UseDataTrack: boolean read FUseDataTrack write FUseDataTrack;
    property DataTrackName: string read FDataTrackName write FDataTrackName;
    property AudioMode: TAudioModes read FAudioMode write SetAudioMode;
    property TrackMode: TTrackModes read FTrackMode write FTrackMode;
  end;

  ECueGenRangeError = class(Exception);

implementation

constructor TCueGen.Create;
begin
  FstartTrack := 2;
  FEndTrack := 3;
  FCueStrings := TStringList.Create;
  FUseDataTrack := False;
  FDataTrackName := '';
  FFileName := 'Track';
  FExtension := '.ogg';
  AudioMode := amCompressed;
  FTrackMode := tmMode12352;
end;

procedure TCueGen.Free;
begin
  FCueStrings.Free;
  inherited;
end;

procedure TCueGen.GenerateCueFile;
var
  i: integer;
  TrackNumber: string;
begin
  FCueStrings.Add('REM Generated by Cue Sheet Generator');
  if (FUseDataTrack = True) and (FDataTrackName <> '') then
  begin
    FCueStrings.Add('FILE "' + FDataTrackName + '" BINARY');
    case FTrackMode of
      tmMode12048: FCueStrings.Add('  TRACK 01 MODE1/2048');
      tmMode12352: FCueStrings.Add('  TRACK 01 MODE1/2352');
      tmMode22336: FCueStrings.Add('  TRACK 01 MODE2/2336');
      tmMode22352: FCueStrings.Add('  TRACK 01 MODE2/2352');
    end;
    FCueStrings.Add('    INDEX 01 00:00:00');
  end;
  for i := FStartTrack to FEndTrack do
  begin
    TrackNumber := Format('%.2d', [i]);
    FCueStrings.Add('FILE "' + FFileName + TrackNumber + FExtension +
      '" ' + FAudioToken);
    FCueStrings.Add('  TRACK ' + TrackNumber + ' AUDIO');
    FCueStrings.Add('    INDEX 01 00:00:00');
  end;
end;

procedure TCueGen.SetAudioMode(const am: TAudioModes);
begin
  case am of
    amCompressed: FAudioToken := CompressedFileToken;
    amRedBook: FAudioToken := NormalFileToken;
  end;
end;

procedure TCueGen.SetFirstTrack(const n: integer);
begin
  if n < 1 then
    raise ECueGenRangeError.Create('First track cannot be lower than 1');
  FStartTrack := n;
end;

procedure TCueGen.SetLastTrack(const n: integer);
begin
  if n > 99 then
    raise ECueGenRangeError.Create('Last track cannot be higher than 99');
  FEndTrack := n;
end;

end.
